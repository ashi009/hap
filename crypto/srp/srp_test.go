package srp

import (
	"bytes"
	"testing"
)

func TestSessionKey(t *testing.T) {
	// Test vectors from HAP R13 spec 5.5.2.
	const I = "alice"
	const p = "password123"
	var a = []byte{0x60, 0x97, 0x55, 0x27, 0x03, 0x5C, 0xF2, 0xAD, 0x19, 0x89, 0x80, 0x6F, 0x04, 0x07, 0x21, 0x0B, 0xC8, 0x1E, 0xDC, 0x04, 0xE2, 0x76, 0x2A, 0x56, 0xAF, 0xD5, 0x29, 0xDD, 0xDA, 0x2D, 0x43, 0x93}
	var s = []byte{0xBE, 0xB2, 0x53, 0x79, 0xD1, 0xA8, 0x58, 0x1E, 0xB5, 0xA7, 0x27, 0x67, 0x3A, 0x24, 0x41, 0xEE}
	var b = []byte{0xE4, 0x87, 0xCB, 0x59, 0xD3, 0x1A, 0xC5, 0x50, 0x47, 0x1E, 0x81, 0xF0, 0x0F, 0x69, 0x28, 0xE0, 0x1D, 0xDA, 0x08, 0xE9, 0x74, 0xA0, 0x04, 0xF4, 0x9E, 0x61, 0xF5, 0xD1, 0x05, 0x28, 0x4D, 0x20}
	var K = []byte{0x5C, 0xBC, 0x21, 0x9D, 0xB0, 0x52, 0x13, 0x8E, 0xE1, 0x14, 0x8C, 0x71, 0xCD, 0x44, 0x98, 0x96, 0x3D, 0x68, 0x25, 0x49, 0xCE, 0x91, 0xCA, 0x24, 0xF0, 0x98, 0x46, 0x8F, 0x06, 0x01, 0x5B, 0xEB, 0x6A, 0xF2, 0x45, 0xC2, 0x09, 0x3F, 0x98, 0xC3, 0x65, 0x1B, 0xCA, 0x83, 0xAB, 0x8C, 0xAB, 0x2B, 0x58, 0x0B, 0xBF, 0x02, 0x18, 0x4F, 0xEF, 0xDF, 0x26, 0x14, 0x2F, 0x73, 0xDF, 0x95, 0xAC, 0x50}
	sec := NewSecret(s, I, p)
	cs := NewClientSession(a, sec)
	ss := NewServerSession(b, sec)
	A := cs.PublicKey()
	B := ss.PublicKey()
	if got, want := cs.SessionKey(B), K; !bytes.Equal(got, want) {
		t.Errorf("client session key missmatch: got %x; want %x", got, want)
	}
	if got, want := ss.SessionKey(A), K; !bytes.Equal(got, want) {
		t.Errorf("server session key missmatch: got %x; want %x", got, want)
	}
	cproof := cs.Proof(K, B)
	if err := ss.VerifyClientProof(K, A, cproof); err != nil {
		t.Errorf("client proof verification failed: %v", err)
	}
	sproof := ss.Proof(K, A, cproof)
	if err := cs.VerifyServerProof(K, cproof, sproof); err != nil {
		t.Errorf("server proof verification failed: %v", err)
	}
}
